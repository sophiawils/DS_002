# -*- coding: utf-8 -*-
"""linear_algebra.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b0anhMcP4nQfUvSZexx-NHqsQ0UlI8V-
"""

from typing import List

Vector = List[float]

#add()

def add(v: Vector, w: Vector) -> Vector:
  """Adds corresponding elements"""
  assert len(v) == len(w), "vectors must be the same length"
  
  return [v_i + w_i for v_i, w_i in zip(v,w)]

#subtract()

def subtract(v: Vector, w: Vector) -> Vector:
  """Subtracts corresponding elements"""
  assert len(v) == len(w), "vectors must be the same length"

  return [v_i - w_i for v_i, w_i in zip(v,w)]

#vector_sum()

def vector_sum(vectors: List[Vector]) -> Vector:
  """Sums all corresponding elements"""
  #check that vectors is not empty
  assert vectors, "no vectors provided!"

  #check the vectors are all the same size
  num_elements = len(vectors[0])
  assert all(len(v) == num_elements for v in vectors), "different sizes!"

  #the i-ith element of the result is the sum of every vector[i]
  return[sum(vector[i] for vector in vectors)
    for i in range(num_elements)]

#scalar_multiply()

def scalar_multiply(c: float, v: Vector) -> Vector:
    """Multiplies every element by c"""
    return [c * v_i for v_i in v]

#vector_mean()

def vector_mean(vectors: List[Vector]) -> Vector:
  """Computes the element-wise average"""
  n = len(vectors)
  return scalar_multiply(1/n, vector_sum(vectors))

#dot()

def dot(v: Vector, w: Vector) -> float:
  """Computes v_1 * w_1 + ... + v_n * w_n"""
  assert len(v) == len(w), "vectors must be same length"

  return sum(v_i * w_i for v_i, w_i in zip(v,w))

assert add([1, 2, 3], [10,9,8]) == [11,11,11], "something wrong with add()"
assert subtract([11,11,11], [1, 2, 3]) == [10,9,8], "trouble with subtract()"
assert vector_sum([[3,4], [5,6], [7,8]]) == [15, 18], "vector_sum() problem"
assert vector_mean([[1, 2], [3, 4], [5, 6]]) == [3, 4], "oopsie vector_mean()"
assert dot([1, 2, 3], [4, 5, 6]) == 32, "dot() issue"  # 1 * 4 + 2 * 5 + 3 * 6